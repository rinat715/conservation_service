// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceDbClient is the client API for ServiceDb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceDbClient interface {
	AddTask(ctx context.Context, in *Record, opts ...grpc.CallOption) (*TaskID, error)
}

type serviceDbClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceDbClient(cc grpc.ClientConnInterface) ServiceDbClient {
	return &serviceDbClient{cc}
}

func (c *serviceDbClient) AddTask(ctx context.Context, in *Record, opts ...grpc.CallOption) (*TaskID, error) {
	out := new(TaskID)
	err := c.cc.Invoke(ctx, "/api.v1.ServiceDb/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceDbServer is the server API for ServiceDb service.
// All implementations must embed UnimplementedServiceDbServer
// for forward compatibility
type ServiceDbServer interface {
	AddTask(context.Context, *Record) (*TaskID, error)
	mustEmbedUnimplementedServiceDbServer()
}

// UnimplementedServiceDbServer must be embedded to have forward compatible implementations.
type UnimplementedServiceDbServer struct {
}

func (UnimplementedServiceDbServer) AddTask(context.Context, *Record) (*TaskID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedServiceDbServer) mustEmbedUnimplementedServiceDbServer() {}

// UnsafeServiceDbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceDbServer will
// result in compilation errors.
type UnsafeServiceDbServer interface {
	mustEmbedUnimplementedServiceDbServer()
}

func RegisterServiceDbServer(s grpc.ServiceRegistrar, srv ServiceDbServer) {
	s.RegisterService(&ServiceDb_ServiceDesc, srv)
}

func _ServiceDb_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDbServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.ServiceDb/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDbServer).AddTask(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceDb_ServiceDesc is the grpc.ServiceDesc for ServiceDb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceDb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.ServiceDb",
	HandlerType: (*ServiceDbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _ServiceDb_AddTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
